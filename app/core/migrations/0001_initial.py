# Generated by Django 3.1.6 on 2021-02-19 18:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_id', models.IntegerField()),
                ('meters_id', models.IntegerField()),
                ('key', models.CharField(max_length=50)),
                ('data_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Microgrid',
            fields=[
                ('microgrid_id', models.IntegerField(primary_key=True, serialize=False)),
                ('microgrid_key', models.CharField(max_length=50)),
                ('microgrid_name', models.CharField(max_length=50)),
                ('client_name', models.CharField(max_length=50)),
                ('client_id', models.IntegerField()),
                ('time_zone', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MicrogridAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=50)),
                ('state', models.CharField(max_length=50)),
                ('street_and_number', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MicrogridComponent',
            fields=[
                ('component_id', models.IntegerField(primary_key=True, serialize=False)),
                ('operation_status', models.IntegerField()),
                ('component_type', models.CharField(max_length=50)),
                ('meters_id', models.IntegerField()),
                ('microgrid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.microgrid')),
            ],
        ),
        migrations.CreateModel(
            name='StaticConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=50)),
                ('value', models.FloatField()),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.microgridcomponent')),
            ],
        ),
        migrations.CreateModel(
            name='MicrogridParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(max_length=50)),
                ('diesel_price', models.FloatField()),
                ('natural_gas_price', models.FloatField()),
                ('utility_name', models.CharField(max_length=50)),
                ('group', models.CharField(max_length=50)),
                ('subgroup', models.CharField(max_length=50)),
                ('tariff_type', models.CharField(max_length=50)),
                ('pis_cofins', models.FloatField()),
                ('icms_1', models.FloatField()),
                ('icms_2', models.FloatField()),
                ('icms_3', models.FloatField()),
                ('tusd_d_peak', models.FloatField()),
                ('tusd_e_peak', models.FloatField()),
                ('tusd_e_intermediary', models.FloatField()),
                ('tusd_e_base', models.FloatField()),
                ('microgrid', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.microgrid')),
            ],
        ),
        migrations.AddField(
            model_name='microgrid',
            name='address',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.microgridaddress'),
        ),
        migrations.CreateModel(
            name='Measurements',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum', models.FloatField()),
                ('maximum', models.FloatField()),
                ('average', models.FloatField()),
                ('state', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('timestamps', models.DateTimeField()),
                ('data_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.datapoints')),
            ],
        ),
        migrations.AddField(
            model_name='datapoints',
            name='component',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.microgridcomponent'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
